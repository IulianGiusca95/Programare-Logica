fmod MYNAT-SIMPLE is
sort Nat .
op 0 : -> Nat .
op s : Nat -> Nat .
op _+_ : Nat Nat -> Nat [assoc comm prec 32] .
vars X Y : Nat .
eq X + 0 = X .
eq X + s(Y) = s(X + Y) .
endfm

 ************************
fmod MYNAT-SIMPLE* is
including MYNAT-SIMPLE .
op _*_ : Nat Nat -> Nat [assoc comm prec 30] .
vars X Y : Nat .
eq X * 0 = 0 .
eq X * s(Y) = (X * Y) + X .
endfm 

*************************

fmod MYINT is
sort Int .
op 0 : -> Int .
op s_ : Int -> Int .
op p_ : Int -> Int .
op _+_ : Int Int -> Int [prec 32] .
op _-_ : Int Int -> Int [prec 32] .
op _*_ : Int Int -> Int [prec 30] .
vars X Y : Int .

eq X + 0 = X .
eq X + s(Y) = s(X + Y) .
eq X + p(Y) = p(X + Y) .
eq X - 0 = X .
eq X - s(Y) = p(X - Y) .
eq X - p(Y) = s(X - Y) .
eq X * 0 = 0 .
eq X * s(Y) = X * Y + X .
eq X * p(Y) = X * Y - X .
endfm


******************************


fmod DIVIDE is
sort Nat .
op 0 : -> Nat .
op s_ : Nat -> Nat .
op m3 : Nat -> Bool .
var X : Nat .
eq m3(0) = true .
eq m3(s 0) = false .
eq m3(s s 0) = false .
eq m3(s s s X) = m3(X) .
endfm

*******************************

fmod INTREGI is
sort Int . 
op 0 : -> Int .
ops s_ p_ : Int -> Int .
op -_ : Int -> Int .
ops _+_ : Int Int -> Int [prec 32] .
ops _-_ : Int Int -> Int [prec 32] .
ops _*_ : Int Int -> Int [prec 30] .
vars X Y : Int .

eq s p X = X .
eq p s X = X .

eq - 0 = 0 .
eq - - X = X .
eq - s X = p(- X) .
eq - p X = s(- X) .

eq X + 0 = X .
eq X + s Y = s(X + Y) .
eq X + p Y = p(X + Y) .

eq X - 0 = 0 .
eq X - s Y = p(X - Y) .
eq X - p Y = s(X - Y) .

eq X * 0 = 0 .
eq X * s Y = X * Y + X .
eq X * p Y = X * Y - X .

endfm

*********************

fmod EX-IF-THEN-ELSE-FI is 
***> cum functioneaza operatorul if_then_else_fi 

   protecting NAT .

   op maxim : Nat Nat -> Nat .

   vars X Y : Nat .

   eq maxim(X,Y) = if X <= Y then Y else X fi .
***( Daca termenul de sort Bool de dupa "if" are forma normala "true",
atunci se face rescrierea in termenul de dupa "then", iar, in caz
contrar, se face rescrierea in termenul de dupa "else". )

endfm

fmod MAX-TREI-NR is
protecting NAT .
op max3 : Nat Nat Nat -> Nat .
vars X Y Z : Nat .
eq max3(X,Y,Z) = if X <= Y then if Y <= Z then Z else Y fi else if X <= Z then Z else X fi fi .
endfm 


****************************************

fmod MYNAT is
sorts Zero NzNat Nat .
subsort Zero NzNat < Nat .
protecting BOOL .
op 0 : -> Zero .
op s_ : Nat -> NzNat .
op _+_ : Nat Nat -> Nat [assoc comm prec 33] .
op _*_ : Nat Nat -> Nat [assoc comm prec 31] .
ops (_<_) (_<=_) (_>_) (_>=_) : Nat Nat -> Bool .
ops min max : Nat Nat -> Nat .

vars X Y : Nat .

eq 0 < 0 = false .
eq 0 < X = true [owise] .
eq s X < s Y = X < Y .
eq X < 0 = false .

eq 0 <= 0 = true .
eq 0 <= X = true .
eq X <= 0 = false .
eq s X <= s Y = X <= Y .
eq min(X,Y) = if X <= Y then X else Y fi .
eq max(X,Y) = if X <= Y then Y else X fi .

endfm


*****************************************

fmod COMPLEX is 
protecting FLOAT .
sort Complex .

op _+_i : Float Float -> Complex .
op _+_ : Complex Complex -> Complex .
op _-_ : Complex Complex -> Complex .
op _*_ : Complex Complex -> Complex .
op _/_ : Complex Complex -> Complex .
op abs : Complex -> Complex .
ops real1 imag1 real2 imag2 real3 imag3 real4 imag4 : Complex Complex -> Float .
op modul : Complex -> Float .

vars A B : Complex .
vars M N O P : Float .

eq A + B = real1(A,B) + imag1(A,B) i .
eq A * B = real2(A,B) + imag2(A,B) i .
eq A - B = real3(A,B) + imag3(A,B) i .
eq A / B = real4(A,B) + imag4(A,B) i .
eq modul(M + N i) = sqrt(M * M + N * N) .
eq real1(M + N i , O + P i) = M + O .
eq imag1(M + N i , O + P i) = N + P .
eq real2(M + N i , O + P i) = M * O - N * P .
eq imag2(M + N i , O + P i) = M * P + O * N .
eq real3(M + N i , O + P i) = M - O .
eq imag3(M + N i , O + P i) = N - P .
eq real4(M + N i , O + P i) = M / O - N / P .
eq imag4(M + N i , O + P i) = M / P + N / O .


endfm
*****************************************

fmod OPERATII-CU-INTREGI is

   sorts Zero NzNat Nat Neg NzInt Int .
   subsort Zero < Nat .
   subsorts NzNat < Nat NzInt < Int .
   subsort Neg < NzInt .

   op 0 : -> Zero .

   ops s_ p_ : Int -> Int .
   op s_ : Nat -> NzNat .
   op p_ : NzNat -> Nat .
   op p_ : Zero -> Neg .
   op p_ : Neg -> Neg .
  
   ops (_+_) (_*_) (_-_) : Int Int -> Int . 
   ops (_+_) (_*_) : Nat Nat -> Nat .
   op _+_ : NzNat Nat -> NzNat .
   op _+_ : Nat NzNat -> NzNat .
   op _*_ : NzInt NzInt -> NzInt .
   op _*_ : NzNat NzNat -> NzNat .
   op _*_ : Zero Int -> Zero .
   op _*_ : Int Zero -> Zero .

   op -_ : Int -> Int .
   op -_ : NzNat -> Neg .
   op -_ : Neg -> NzNat .

   op abs : Int -> Nat .
   op abs : NzInt -> NzNat .

   ops (_<=_) (_<_) (_>=_) (_>_) : Int Int -> Bool .
   
   op _div_ : Nat NzNat -> Nat .
   op _div_ : Int NzInt -> Int .
   op _mod_ : Int NzInt -> Nat .
   
   op cmmdc : Int Int -> Nat .

   vars X Y : Int .
   vars M M1 : Nat .
   var N : Neg .
   var P : NzNat .

   eq p s X = X .
   eq s p X = X .

   eq X + 0 = X .
   eq X + s Y = s (X + Y) .
   eq X + p Y = p (X + Y) .

   eq - 0 = 0 .
   eq - - X = X .
   eq - s X = p (- X) .
   eq - p X = s (- X) .

   eq X - 0 = X .
   eq X - s Y = p (X - Y) .
   eq X - p Y = s (X - Y) .

   eq X * 0 = 0 .
   eq X * s Y = (X * Y) + X .
   eq X * p Y = (X * Y) - X .

   eq abs(M) = M .
   eq abs(N) = - N .

   eq 0 <= M = true .
   eq P <= 0 = false .
   eq - M <= - M1 = M1 <= M .
   eq N <= M = true .
   eq M <= N = false .
   eq s X <= s Y = X <= Y .
   eq p X <= p Y = X <= Y .

   eq X < Y = X <= Y and X =/= Y .

   eq X >= Y = Y <= X .

   eq X > Y = Y < X .   

   ceq M div P = 0 if M < P .
   ceq M div P = s((M - P) div P) if P <= M .

   ceq M mod P = M if M < P .
   ceq M mod P = (M - P) mod P if P <= M .

   eq cmmdc(0,M) = M .
   eq cmmdc(P,M) = cmmdc(M mod P,P) .

   ceq cmmdc(X,Y) = cmmdc(abs(X),abs(Y)) if X < 0 or Y < 0 .

   eq X mod N = X mod (- N) .
   ceq N mod P = 0 if (- N) mod P == 0 .
   ceq N mod P = P - ((- N) mod P) if (- N) mod P =/= 0 .

   eq X div N = - (X div (- N)) .
   ceq N div P = - ((- N) div P) if (- N) mod P == 0 .
   ceq N div P = p (- ((- N) div P)) if (- N) mod P =/= 0 .

endfm






fmod RATIONAL is

protecting BOOL .
protecting INT .
sort Rational .

op _/_ : Int Int -> Rational .
op _+_ : Rational Rational -> Rational .
op _-_ : Rational Rational -> Rational .
op -_ : Rational -> Rational .


vars A B C D : Int .
vars M N : Rational .

eq A / B + C / D = A * D + B * C / B * D .
eq A / B - C / D = A * D - B * C / B * D .


endfm


fmod DATA-CALENDARISTICA is

protecting NAT .
protecting BOOL .
sort Data .

op _/_/_ : Nat Nat Nat -> Data .
op valid : Data -> Bool .

vars ZI LUNA AN : Nat .

eq valid(ZI/LUNA/AN) = if 4 divides AN 
                                    then if MONTH == 2 
                                            then if ZI >= 1 AND ZI <= 29 
                                                    then true 
                                            else false fi
                                    else if MONTH >= 1 and MONTH <=12 and MONTH =/= 2
                                            then if MONTH <= 7
                                                    then if 2 divides MONTH 
                                                            then if ZI >= 1 and ZI <=30
                                                                    then true else false fi
                                                            else if ZI >= 1 and ZI <= 31
                                                                    then true else false fi
                                                    else if 2 divides MONTH
                                                            then if ZI >= 1 and ZI <= 31
                                                                    then true else false fi 
                                                            else if ZI >=1 and ZI <= 30
                                                                    then true else false fi fi 
                                            






